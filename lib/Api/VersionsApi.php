<?php
/**
 * VersionsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Aternos\HangarApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Hangar API
 *
 * This page describes the format for the current Hangar REST API as well as general usage guidelines.<br> Note that all routes **not** listed here should be considered **internal**, and can change at a moment's notice. **Do not use them**.  ## Authentication and Authorization There are two ways to consume the API: Authenticated or anonymous.  ### Anonymous When using anonymous authentication, you only have access to public information, but you don't need to worry about creating and storing an API key or handing JWTs.  ### Authenticated If you need access to non-public content or actions, you need to create and use API keys. These can be created by going to the API keys page via the profile dropdown or by going to your user page and clicking on the key icon.  API keys allow you to impersonate yourself, so they should be handled like passwords. **Do not share them with anyone else!**  #### Getting and Using a JWT Once you have an API key, you need to authenticate yourself: Send a `POST` request with your API key identifier to `/api/v1/authenticate?apiKey=yourKey`. The response will contain your JWT as well as an expiration time. Put this JWT into the `Authorization` header of every request and make sure to request a new JWT after the expiration time has passed.  Please also set a meaningful `User-Agent` header. This allows us to better identify loads and needs for potentially new endpoints.  ## Misc ### Date Formats Standard ISO types. Where possible, we use the [OpenAPI format modifier](https://swagger.io/docs/specification/data-models/data-types/#format).  ### Rate Limits and Caching The default rate limit is set at 20 requests every 5 seconds with an initial overdraft for extra leniency. Individual endpoints, such as version creation, may have stricter rate limiting.  If applicable, always cache responses. The Hangar API itself is cached by CloudFlare and internally.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aternos\HangarApi\Api;

use Aternos\HangarApi\Model\RequestPagination;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Aternos\HangarApi\ApiException;
use Aternos\HangarApi\Configuration;
use Aternos\HangarApi\HeaderSelector;
use Aternos\HangarApi\ObjectSerializer;

/**
 * VersionsApi Class Doc Comment
 *
 * @category Class
 * @package  Aternos\HangarApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class VersionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'downloadVersion' => [
            'application/json',
        ],
        'listVersions' => [
            'application/json',
        ],
        'showVersion' => [
            'application/json',
        ],
        'showVersionStats' => [
            'application/json',
        ],
        'uploadVersion' => [
            'multipart/form-data',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation downloadVersion
     *
     * Downloads a version
     *
     * @param  string $author The author of the project to download the version from (required)
     * @param  string $slug The slug of the project to download the version from (required)
     * @param  string $name The name of the version to download (required)
     * @param  string $platform The platform of the version to download (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadVersion'] to see the possible values for this operation
     *
     * @throws \Aternos\HangarApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\SplFileObject|\SplFileObject|\SplFileObject|\SplFileObject
     */
    public function downloadVersion($author, $slug, $name, $platform, string $contentType = self::contentTypes['downloadVersion'][0])
    {
        list($response) = $this->downloadVersionWithHttpInfo($author, $slug, $name, $platform, $contentType);
        return $response;
    }

    /**
     * Operation downloadVersionWithHttpInfo
     *
     * Downloads a version
     *
     * @param  string $author The author of the project to download the version from (required)
     * @param  string $slug The slug of the project to download the version from (required)
     * @param  string $name The name of the version to download (required)
     * @param  string $platform The platform of the version to download (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadVersion'] to see the possible values for this operation
     *
     * @throws \Aternos\HangarApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\SplFileObject|\SplFileObject|\SplFileObject|\SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadVersionWithHttpInfo($author, $slug, $name, $platform, string $contentType = self::contentTypes['downloadVersion'][0])
    {
        $request = $this->downloadVersionRequest($author, $slug, $name, $platform, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 303:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 303:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation downloadVersionAsync
     *
     * Downloads a version
     *
     * @param  string $author The author of the project to download the version from (required)
     * @param  string $slug The slug of the project to download the version from (required)
     * @param  string $name The name of the version to download (required)
     * @param  string $platform The platform of the version to download (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadVersion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadVersionAsync($author, $slug, $name, $platform, string $contentType = self::contentTypes['downloadVersion'][0])
    {
        return $this->downloadVersionAsyncWithHttpInfo($author, $slug, $name, $platform, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadVersionAsyncWithHttpInfo
     *
     * Downloads a version
     *
     * @param  string $author The author of the project to download the version from (required)
     * @param  string $slug The slug of the project to download the version from (required)
     * @param  string $name The name of the version to download (required)
     * @param  string $platform The platform of the version to download (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadVersion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadVersionAsyncWithHttpInfo($author, $slug, $name, $platform, string $contentType = self::contentTypes['downloadVersion'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->downloadVersionRequest($author, $slug, $name, $platform, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadVersion'
     *
     * @param  string $author The author of the project to download the version from (required)
     * @param  string $slug The slug of the project to download the version from (required)
     * @param  string $name The name of the version to download (required)
     * @param  string $platform The platform of the version to download (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadVersion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function downloadVersionRequest($author, $slug, $name, $platform, string $contentType = self::contentTypes['downloadVersion'][0])
    {

        // verify the required parameter 'author' is set
        if ($author === null || (is_array($author) && count($author) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $author when calling downloadVersion'
            );
        }

        // verify the required parameter 'slug' is set
        if ($slug === null || (is_array($slug) && count($slug) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $slug when calling downloadVersion'
            );
        }

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling downloadVersion'
            );
        }

        // verify the required parameter 'platform' is set
        if ($platform === null || (is_array($platform) && count($platform) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform when calling downloadVersion'
            );
        }


        $resourcePath = '/api/v1/projects/{author}/{slug}/versions/{name}/{platform}/download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($author !== null) {
            $resourcePath = str_replace(
                '{' . 'author' . '}',
                ObjectSerializer::toPathValue($author),
                $resourcePath
            );
        }
        // path params
        if ($slug !== null) {
            $resourcePath = str_replace(
                '{' . 'slug' . '}',
                ObjectSerializer::toPathValue($slug),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($platform !== null) {
            $resourcePath = str_replace(
                '{' . 'platform' . '}',
                ObjectSerializer::toPathValue($platform),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/octet-stream', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listVersions
     *
     * Returns all versions of a project
     *
     * @param  string $author The author of the project to return versions for (required)
     * @param  string $slug The slug of the project to return versions for (required)
     * @param  RequestPagination $pagination Pagination information (required)
     * @param  string $channel A name of a version channel to filter for (optional)
     * @param  string $platform A platform name to filter for (optional)
     * @param  string $platform_version A platform version to filter for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listVersions'] to see the possible values for this operation
     *
     * @throws \Aternos\HangarApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aternos\HangarApi\Model\PaginatedResultVersion|\Aternos\HangarApi\Model\PaginatedResultVersion|\Aternos\HangarApi\Model\PaginatedResultVersion
     */
    public function listVersions($author, $slug, $pagination, $channel = null, $platform = null, $platform_version = null, string $contentType = self::contentTypes['listVersions'][0])
    {
        list($response) = $this->listVersionsWithHttpInfo($author, $slug, $pagination, $channel, $platform, $platform_version, $contentType);
        return $response;
    }

    /**
     * Operation listVersionsWithHttpInfo
     *
     * Returns all versions of a project
     *
     * @param  string $author The author of the project to return versions for (required)
     * @param  string $slug The slug of the project to return versions for (required)
     * @param  RequestPagination $pagination Pagination information (required)
     * @param  string $channel A name of a version channel to filter for (optional)
     * @param  string $platform A platform name to filter for (optional)
     * @param  string $platform_version A platform version to filter for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listVersions'] to see the possible values for this operation
     *
     * @throws \Aternos\HangarApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aternos\HangarApi\Model\PaginatedResultVersion|\Aternos\HangarApi\Model\PaginatedResultVersion|\Aternos\HangarApi\Model\PaginatedResultVersion, HTTP status code, HTTP response headers (array of strings)
     */
    public function listVersionsWithHttpInfo($author, $slug, $pagination, $channel = null, $platform = null, $platform_version = null, string $contentType = self::contentTypes['listVersions'][0])
    {
        $request = $this->listVersionsRequest($author, $slug, $pagination, $channel, $platform, $platform_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aternos\HangarApi\Model\PaginatedResultVersion' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aternos\HangarApi\Model\PaginatedResultVersion' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aternos\HangarApi\Model\PaginatedResultVersion', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Aternos\HangarApi\Model\PaginatedResultVersion' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aternos\HangarApi\Model\PaginatedResultVersion' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aternos\HangarApi\Model\PaginatedResultVersion', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Aternos\HangarApi\Model\PaginatedResultVersion' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aternos\HangarApi\Model\PaginatedResultVersion' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aternos\HangarApi\Model\PaginatedResultVersion', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aternos\HangarApi\Model\PaginatedResultVersion';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aternos\HangarApi\Model\PaginatedResultVersion',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aternos\HangarApi\Model\PaginatedResultVersion',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aternos\HangarApi\Model\PaginatedResultVersion',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listVersionsAsync
     *
     * Returns all versions of a project
     *
     * @param  string $author The author of the project to return versions for (required)
     * @param  string $slug The slug of the project to return versions for (required)
     * @param  RequestPagination $pagination Pagination information (required)
     * @param  string $channel A name of a version channel to filter for (optional)
     * @param  string $platform A platform name to filter for (optional)
     * @param  string $platform_version A platform version to filter for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listVersions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listVersionsAsync($author, $slug, $pagination, $channel = null, $platform = null, $platform_version = null, string $contentType = self::contentTypes['listVersions'][0])
    {
        return $this->listVersionsAsyncWithHttpInfo($author, $slug, $pagination, $channel, $platform, $platform_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listVersionsAsyncWithHttpInfo
     *
     * Returns all versions of a project
     *
     * @param  string $author The author of the project to return versions for (required)
     * @param  string $slug The slug of the project to return versions for (required)
     * @param  RequestPagination $pagination Pagination information (required)
     * @param  string $channel A name of a version channel to filter for (optional)
     * @param  string $platform A platform name to filter for (optional)
     * @param  string $platform_version A platform version to filter for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listVersions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listVersionsAsyncWithHttpInfo($author, $slug, $pagination, $channel = null, $platform = null, $platform_version = null, string $contentType = self::contentTypes['listVersions'][0])
    {
        $returnType = '\Aternos\HangarApi\Model\PaginatedResultVersion';
        $request = $this->listVersionsRequest($author, $slug, $pagination, $channel, $platform, $platform_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listVersions'
     *
     * @param  string $author The author of the project to return versions for (required)
     * @param  string $slug The slug of the project to return versions for (required)
     * @param  RequestPagination $pagination Pagination information (required)
     * @param  string $channel A name of a version channel to filter for (optional)
     * @param  string $platform A platform name to filter for (optional)
     * @param  string $platform_version A platform version to filter for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listVersions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listVersionsRequest($author, $slug, $pagination, $channel = null, $platform = null, $platform_version = null, string $contentType = self::contentTypes['listVersions'][0])
    {

        // verify the required parameter 'author' is set
        if ($author === null || (is_array($author) && count($author) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $author when calling listVersions'
            );
        }

        // verify the required parameter 'slug' is set
        if ($slug === null || (is_array($slug) && count($slug) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $slug when calling listVersions'
            );
        }

        // verify the required parameter 'pagination' is set
        if ($pagination === null || (is_array($pagination) && count($pagination) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pagination when calling listVersions'
            );
        }





        $resourcePath = '/api/v1/projects/{author}/{slug}/versions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagination,
            'pagination', // param base name
            'object', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channel,
            'channel', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $platform,
            'platform', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $platform_version,
            'platformVersion', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($author !== null) {
            $resourcePath = str_replace(
                '{' . 'author' . '}',
                ObjectSerializer::toPathValue($author),
                $resourcePath
            );
        }
        // path params
        if ($slug !== null) {
            $resourcePath = str_replace(
                '{' . 'slug' . '}',
                ObjectSerializer::toPathValue($slug),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation showVersion
     *
     * Returns a specific version of a project
     *
     * @param  string $author The author of the project to return the version for (required)
     * @param  string $slug The slug of the project to return the version for (required)
     * @param  string $name The name of the version to return (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['showVersion'] to see the possible values for this operation
     *
     * @throws \Aternos\HangarApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aternos\HangarApi\Model\Version|\Aternos\HangarApi\Model\Version|\Aternos\HangarApi\Model\Version
     */
    public function showVersion($author, $slug, $name, string $contentType = self::contentTypes['showVersion'][0])
    {
        list($response) = $this->showVersionWithHttpInfo($author, $slug, $name, $contentType);
        return $response;
    }

    /**
     * Operation showVersionWithHttpInfo
     *
     * Returns a specific version of a project
     *
     * @param  string $author The author of the project to return the version for (required)
     * @param  string $slug The slug of the project to return the version for (required)
     * @param  string $name The name of the version to return (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['showVersion'] to see the possible values for this operation
     *
     * @throws \Aternos\HangarApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aternos\HangarApi\Model\Version|\Aternos\HangarApi\Model\Version|\Aternos\HangarApi\Model\Version, HTTP status code, HTTP response headers (array of strings)
     */
    public function showVersionWithHttpInfo($author, $slug, $name, string $contentType = self::contentTypes['showVersion'][0])
    {
        $request = $this->showVersionRequest($author, $slug, $name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aternos\HangarApi\Model\Version' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aternos\HangarApi\Model\Version' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aternos\HangarApi\Model\Version', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Aternos\HangarApi\Model\Version' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aternos\HangarApi\Model\Version' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aternos\HangarApi\Model\Version', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Aternos\HangarApi\Model\Version' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aternos\HangarApi\Model\Version' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aternos\HangarApi\Model\Version', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aternos\HangarApi\Model\Version';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aternos\HangarApi\Model\Version',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aternos\HangarApi\Model\Version',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aternos\HangarApi\Model\Version',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation showVersionAsync
     *
     * Returns a specific version of a project
     *
     * @param  string $author The author of the project to return the version for (required)
     * @param  string $slug The slug of the project to return the version for (required)
     * @param  string $name The name of the version to return (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['showVersion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showVersionAsync($author, $slug, $name, string $contentType = self::contentTypes['showVersion'][0])
    {
        return $this->showVersionAsyncWithHttpInfo($author, $slug, $name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation showVersionAsyncWithHttpInfo
     *
     * Returns a specific version of a project
     *
     * @param  string $author The author of the project to return the version for (required)
     * @param  string $slug The slug of the project to return the version for (required)
     * @param  string $name The name of the version to return (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['showVersion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showVersionAsyncWithHttpInfo($author, $slug, $name, string $contentType = self::contentTypes['showVersion'][0])
    {
        $returnType = '\Aternos\HangarApi\Model\Version';
        $request = $this->showVersionRequest($author, $slug, $name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'showVersion'
     *
     * @param  string $author The author of the project to return the version for (required)
     * @param  string $slug The slug of the project to return the version for (required)
     * @param  string $name The name of the version to return (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['showVersion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function showVersionRequest($author, $slug, $name, string $contentType = self::contentTypes['showVersion'][0])
    {

        // verify the required parameter 'author' is set
        if ($author === null || (is_array($author) && count($author) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $author when calling showVersion'
            );
        }

        // verify the required parameter 'slug' is set
        if ($slug === null || (is_array($slug) && count($slug) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $slug when calling showVersion'
            );
        }

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling showVersion'
            );
        }


        $resourcePath = '/api/v1/projects/{author}/{slug}/versions/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($author !== null) {
            $resourcePath = str_replace(
                '{' . 'author' . '}',
                ObjectSerializer::toPathValue($author),
                $resourcePath
            );
        }
        // path params
        if ($slug !== null) {
            $resourcePath = str_replace(
                '{' . 'slug' . '}',
                ObjectSerializer::toPathValue($slug),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation showVersionStats
     *
     * Returns the stats for a version
     *
     * @param  string $author The author of the version to return the stats for (required)
     * @param  string $slug The slug of the project to return stats for (required)
     * @param  string $name The version to return the stats for (required)
     * @param  string $platform The platform of the version to return stats for (required)
     * @param  \DateTime $from_date The first date to include in the result (required)
     * @param  \DateTime $to_date The last date to include in the result (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['showVersionStats'] to see the possible values for this operation
     *
     * @throws \Aternos\HangarApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array<string,\Aternos\HangarApi\Model\VersionStats>|array<string,\Aternos\HangarApi\Model\VersionStats>|array<string,\Aternos\HangarApi\Model\VersionStats>
     */
    public function showVersionStats($author, $slug, $name, $platform, $from_date, $to_date, string $contentType = self::contentTypes['showVersionStats'][0])
    {
        list($response) = $this->showVersionStatsWithHttpInfo($author, $slug, $name, $platform, $from_date, $to_date, $contentType);
        return $response;
    }

    /**
     * Operation showVersionStatsWithHttpInfo
     *
     * Returns the stats for a version
     *
     * @param  string $author The author of the version to return the stats for (required)
     * @param  string $slug The slug of the project to return stats for (required)
     * @param  string $name The version to return the stats for (required)
     * @param  string $platform The platform of the version to return stats for (required)
     * @param  \DateTime $from_date The first date to include in the result (required)
     * @param  \DateTime $to_date The last date to include in the result (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['showVersionStats'] to see the possible values for this operation
     *
     * @throws \Aternos\HangarApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of array<string,\Aternos\HangarApi\Model\VersionStats>|array<string,\Aternos\HangarApi\Model\VersionStats>|array<string,\Aternos\HangarApi\Model\VersionStats>, HTTP status code, HTTP response headers (array of strings)
     */
    public function showVersionStatsWithHttpInfo($author, $slug, $name, $platform, $from_date, $to_date, string $contentType = self::contentTypes['showVersionStats'][0])
    {
        $request = $this->showVersionStatsRequest($author, $slug, $name, $platform, $from_date, $to_date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('array<string,\Aternos\HangarApi\Model\VersionStats>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,\Aternos\HangarApi\Model\VersionStats>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,\Aternos\HangarApi\Model\VersionStats>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('array<string,\Aternos\HangarApi\Model\VersionStats>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,\Aternos\HangarApi\Model\VersionStats>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,\Aternos\HangarApi\Model\VersionStats>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('array<string,\Aternos\HangarApi\Model\VersionStats>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,\Aternos\HangarApi\Model\VersionStats>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,\Aternos\HangarApi\Model\VersionStats>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'array<string,\Aternos\HangarApi\Model\VersionStats>';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,\Aternos\HangarApi\Model\VersionStats>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,\Aternos\HangarApi\Model\VersionStats>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,\Aternos\HangarApi\Model\VersionStats>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation showVersionStatsAsync
     *
     * Returns the stats for a version
     *
     * @param  string $author The author of the version to return the stats for (required)
     * @param  string $slug The slug of the project to return stats for (required)
     * @param  string $name The version to return the stats for (required)
     * @param  string $platform The platform of the version to return stats for (required)
     * @param  \DateTime $from_date The first date to include in the result (required)
     * @param  \DateTime $to_date The last date to include in the result (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['showVersionStats'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showVersionStatsAsync($author, $slug, $name, $platform, $from_date, $to_date, string $contentType = self::contentTypes['showVersionStats'][0])
    {
        return $this->showVersionStatsAsyncWithHttpInfo($author, $slug, $name, $platform, $from_date, $to_date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation showVersionStatsAsyncWithHttpInfo
     *
     * Returns the stats for a version
     *
     * @param  string $author The author of the version to return the stats for (required)
     * @param  string $slug The slug of the project to return stats for (required)
     * @param  string $name The version to return the stats for (required)
     * @param  string $platform The platform of the version to return stats for (required)
     * @param  \DateTime $from_date The first date to include in the result (required)
     * @param  \DateTime $to_date The last date to include in the result (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['showVersionStats'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showVersionStatsAsyncWithHttpInfo($author, $slug, $name, $platform, $from_date, $to_date, string $contentType = self::contentTypes['showVersionStats'][0])
    {
        $returnType = 'array<string,\Aternos\HangarApi\Model\VersionStats>';
        $request = $this->showVersionStatsRequest($author, $slug, $name, $platform, $from_date, $to_date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'showVersionStats'
     *
     * @param  string $author The author of the version to return the stats for (required)
     * @param  string $slug The slug of the project to return stats for (required)
     * @param  string $name The version to return the stats for (required)
     * @param  string $platform The platform of the version to return stats for (required)
     * @param  \DateTime $from_date The first date to include in the result (required)
     * @param  \DateTime $to_date The last date to include in the result (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['showVersionStats'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function showVersionStatsRequest($author, $slug, $name, $platform, $from_date, $to_date, string $contentType = self::contentTypes['showVersionStats'][0])
    {

        // verify the required parameter 'author' is set
        if ($author === null || (is_array($author) && count($author) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $author when calling showVersionStats'
            );
        }

        // verify the required parameter 'slug' is set
        if ($slug === null || (is_array($slug) && count($slug) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $slug when calling showVersionStats'
            );
        }

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling showVersionStats'
            );
        }

        // verify the required parameter 'platform' is set
        if ($platform === null || (is_array($platform) && count($platform) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform when calling showVersionStats'
            );
        }

        // verify the required parameter 'from_date' is set
        if ($from_date === null || (is_array($from_date) && count($from_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_date when calling showVersionStats'
            );
        }

        // verify the required parameter 'to_date' is set
        if ($to_date === null || (is_array($to_date) && count($to_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to_date when calling showVersionStats'
            );
        }


        $resourcePath = '/api/v1/projects/{author}/{slug}/versions/{name}/{platform}/stats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'fromDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to_date,
            'toDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($author !== null) {
            $resourcePath = str_replace(
                '{' . 'author' . '}',
                ObjectSerializer::toPathValue($author),
                $resourcePath
            );
        }
        // path params
        if ($slug !== null) {
            $resourcePath = str_replace(
                '{' . 'slug' . '}',
                ObjectSerializer::toPathValue($slug),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($platform !== null) {
            $resourcePath = str_replace(
                '{' . 'platform' . '}',
                ObjectSerializer::toPathValue($platform),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uploadVersion
     *
     * Creates a new version and returns parts of its metadata
     *
     * @param  string $author The author of the project to return versions for (required)
     * @param  string $slug The slug of the project to return versions for (required)
     * @param  \Aternos\HangarApi\Model\VersionUpload $version_upload version_upload (required)
     * @param  \SplFileObject[] $files The version files in order of selected platforms, if any (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadVersion'] to see the possible values for this operation
     *
     * @throws \Aternos\HangarApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aternos\HangarApi\Model\UploadedVersion|\Aternos\HangarApi\Model\UploadedVersion|\Aternos\HangarApi\Model\UploadedVersion
     */
    public function uploadVersion($author, $slug, $version_upload, $files = null, string $contentType = self::contentTypes['uploadVersion'][0])
    {
        list($response) = $this->uploadVersionWithHttpInfo($author, $slug, $version_upload, $files, $contentType);
        return $response;
    }

    /**
     * Operation uploadVersionWithHttpInfo
     *
     * Creates a new version and returns parts of its metadata
     *
     * @param  string $author The author of the project to return versions for (required)
     * @param  string $slug The slug of the project to return versions for (required)
     * @param  \Aternos\HangarApi\Model\VersionUpload $version_upload (required)
     * @param  \SplFileObject[] $files The version files in order of selected platforms, if any (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadVersion'] to see the possible values for this operation
     *
     * @throws \Aternos\HangarApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aternos\HangarApi\Model\UploadedVersion|\Aternos\HangarApi\Model\UploadedVersion|\Aternos\HangarApi\Model\UploadedVersion, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadVersionWithHttpInfo($author, $slug, $version_upload, $files = null, string $contentType = self::contentTypes['uploadVersion'][0])
    {
        $request = $this->uploadVersionRequest($author, $slug, $version_upload, $files, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Aternos\HangarApi\Model\UploadedVersion' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aternos\HangarApi\Model\UploadedVersion' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aternos\HangarApi\Model\UploadedVersion', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Aternos\HangarApi\Model\UploadedVersion' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aternos\HangarApi\Model\UploadedVersion' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aternos\HangarApi\Model\UploadedVersion', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Aternos\HangarApi\Model\UploadedVersion' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aternos\HangarApi\Model\UploadedVersion' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aternos\HangarApi\Model\UploadedVersion', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aternos\HangarApi\Model\UploadedVersion';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aternos\HangarApi\Model\UploadedVersion',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aternos\HangarApi\Model\UploadedVersion',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aternos\HangarApi\Model\UploadedVersion',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation uploadVersionAsync
     *
     * Creates a new version and returns parts of its metadata
     *
     * @param  string $author The author of the project to return versions for (required)
     * @param  string $slug The slug of the project to return versions for (required)
     * @param  \Aternos\HangarApi\Model\VersionUpload $version_upload (required)
     * @param  \SplFileObject[] $files The version files in order of selected platforms, if any (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadVersion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadVersionAsync($author, $slug, $version_upload, $files = null, string $contentType = self::contentTypes['uploadVersion'][0])
    {
        return $this->uploadVersionAsyncWithHttpInfo($author, $slug, $version_upload, $files, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadVersionAsyncWithHttpInfo
     *
     * Creates a new version and returns parts of its metadata
     *
     * @param  string $author The author of the project to return versions for (required)
     * @param  string $slug The slug of the project to return versions for (required)
     * @param  \Aternos\HangarApi\Model\VersionUpload $version_upload (required)
     * @param  \SplFileObject[] $files The version files in order of selected platforms, if any (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadVersion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadVersionAsyncWithHttpInfo($author, $slug, $version_upload, $files = null, string $contentType = self::contentTypes['uploadVersion'][0])
    {
        $returnType = '\Aternos\HangarApi\Model\UploadedVersion';
        $request = $this->uploadVersionRequest($author, $slug, $version_upload, $files, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadVersion'
     *
     * @param  string $author The author of the project to return versions for (required)
     * @param  string $slug The slug of the project to return versions for (required)
     * @param  \Aternos\HangarApi\Model\VersionUpload $version_upload (required)
     * @param  \SplFileObject[] $files The version files in order of selected platforms, if any (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadVersion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function uploadVersionRequest($author, $slug, $version_upload, $files = null, string $contentType = self::contentTypes['uploadVersion'][0])
    {

        // verify the required parameter 'author' is set
        if ($author === null || (is_array($author) && count($author) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $author when calling uploadVersion'
            );
        }

        // verify the required parameter 'slug' is set
        if ($slug === null || (is_array($slug) && count($slug) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $slug when calling uploadVersion'
            );
        }

        // verify the required parameter 'version_upload' is set
        if ($version_upload === null || (is_array($version_upload) && count($version_upload) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version_upload when calling uploadVersion'
            );
        }



        $resourcePath = '/api/v1/projects/{author}/{slug}/upload';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($author !== null) {
            $resourcePath = str_replace(
                '{' . 'author' . '}',
                ObjectSerializer::toPathValue($author),
                $resourcePath
            );
        }
        // path params
        if ($slug !== null) {
            $resourcePath = str_replace(
                '{' . 'slug' . '}',
                ObjectSerializer::toPathValue($slug),
                $resourcePath
            );
        }

        // form params
        if ($files !== null) {
            $multipart = true;
            $formParams['files'] = [];
            $paramFiles = is_array($files) ? $files : [$files];
            foreach ($paramFiles as $paramFile) {
                $formParams['files'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($version_upload !== null) {
            $formParams['versionUpload'] = ObjectSerializer::toFormValue($version_upload);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
